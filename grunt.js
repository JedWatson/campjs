/*global module:false*/
module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    meta: {
      version: '0.1.0',
      banner: '/*! CampJs - v<%= meta.version %> - ' +
        '<%= grunt.template.today("yyyy-mm-dd") %>\n' +
        '* THIS FILE IS GENERATED BY GRUNT. DO NOT MODIFY MANUALLY\n' +
        '* http://campjs.com/\n' +
        '* Copyright (c) <%= grunt.template.today("yyyy") %> ' +
        'campJS.com; */'
    },
    lint: {
      files: []
    },
    coffee: {
      app: {
        src: ['src/**.coffee'],
        dest: 'public/js/',
        options: {
            bare: true
        }
      }
    },
    concat: {
      libs: {
        src: ['<banner:meta.banner>',
              'vendor/js/jquery.js',
              'vendor/js/underscore.js',
              'vendor/js/backbone.js',
              'vendor/js/bootstrap.js',
              'vendor/js/stellar.js',
              'vendor/js/handlebars.runtime.js',
              'vendor/js/jquery-form.js',
              'vendor/js/transit.js',
              'vendor/js/iealert.js'
        ],
        dest: 'public/js/libs.js'
      },
      campjs: {
        src: ['<banner:meta.banner>',
             'public/js/campjs.js',
             'public/js/models/*.js',
             'public/js/collections/*.js',
             'public/js/views/*.js',
             'public/js/router.js'],
        dest: 'public/js/campjs.js'
      },
      css: {
        src: ['<banner:meta.banner>',
              'vendor/css/bootstrap.css',
              'vendor/css/bootstrap-responsive.css',
              'public/css/style.css'
        ],
        dest: 'public/css/screen.css'
      }
    },
    min: {
      libs: {
        src: ['<banner:meta.banner>', 'public/js/libs.js'],
        dest: 'public/js/libs.min.js'
      },
      campjs: {
        src: ['<banner:meta.banner>', 'public/js/campjs.js'],
        dest: 'public/js/campjs.min.js'
      },
      templates: {
        src: ['<banner:meta.banner>', 'public/js/templates.js'],
        dest: 'public/js/templates.min.js'
      }
    },
    recess: {
      css: {
        src: ['public/css/screen.css'],
        dest: 'public/css/screen.min.css',
        options: {
          compress: true,
          noIDs: false
        }
      }
    },

    jade: {
      all: {
        src: 'src/templates/*.jade',
        dest: 'public/templates/',
        options: {
          client: false
        }
      },
      layout: {
        src: 'src/index.jade',
        dest: 'public/',
        options: {
          client: false
        }
      }
    },
    watch: {
      files: ['<config:lint.files>', 'src/*', 'src/**'],
      tasks: 'jade coffee shell:rename shell:stylus concat:campjs concat:css min:campjs min:templates recess'
    },
    shell: {
      _options: {
        failOnError: true
      },
      //handlebars: {
        //command: './node_modules/.bin/handlebars public/templates/ -f public/js/templates.js'
      //},
      stylus: {
        command: './node_modules/.bin/stylus --use nib ./src/css/*.styl -o ./public/css/'
      },
      //clean: {
        //command: 'rm public/templates/*.handlebars'
      //},
      rename: {
        command: 'for file in ./public/templates/*.html\n\
          do \n\
          mv ${file} ${file/.html/.handlebars} \n\
          done'
      }
    }
  });

  grunt.loadNpmTasks('grunt-recess');
  grunt.loadNpmTasks('grunt-jade');
  grunt.loadNpmTasks('grunt-coffee');
  grunt.loadNpmTasks('grunt-shell');

  // Default task.
  grunt.registerTask('default', 'jade coffee shell:rename shell:stylus concat min recess');

};
